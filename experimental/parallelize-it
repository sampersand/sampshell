#!zsh

local expand usage fn

## Parallelize a function by making a new job once per argument given
# Support for when the shell is ZSH, when we explicitly have `-e`.
[ -n "$ZSH_VERSION" ] && setopt LOCAL_OPTIONS GLOB_SUBST SH_WORD_SPLIT

if [ "${1-}" = '-e' ]; then
   expand=1
   shift
fi

if [ "${1-}" = -- ]; then
   shift
fi

if [ "$#" -eq 0 ]; then
   cat <<USAGE >&2; return 2
usage: parallelize-it [-e] fn [args ...]
runs 'fn' for each argument, as a job. '-e' does shell expansion on the args;
without it, args are quoted."
USAGE
fi

fn=${1:?'no function given'}
shift
if ! command -v "$fn" >/dev/null 2>&1; then
   printf >&2 'fn is not executable: %s\n' "$fn"
   return 1
fi

for arg; do
   if [ -n "$expand" ]; then
   "$fn"
done
while [ "$#" -gt 1 ]; do
   # If we're expanding...
   if [ -n "${SampShell_scratch-}" ]; then
      # Unset `SampShell_scratch` so the child process doesn't see it
      unset -v SampShell_scratch

      # Run the function
      "$1" $2 &

      # Remove argument #2
      SampShell_scratch=$1
      shift 2
      set -- "$SampShell_scratch" "$@"

      # Set it so we'll go into this block next time.
      SampShell_scratch=1
   else
      # Run the function
      "$1" "$2" &

      # Remove argument #2
      SampShell_scratch=$1
      shift 2
      set -- "$SampShell_scratch" "$@"

      # unset it so won't run the expand block.
      unset -v SampShell_scratch
   fi
done

unset -v SampShell_scratch
