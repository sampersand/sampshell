#!/bin/sh

# `xx`: A helper script to repeat a string a certain amount of times
# mnemonic: just like the `xx` operator in raku, or the `x` operator in perl.

####################################################################################################
#                                          Parse Options                                           #
####################################################################################################

usage () { cat; } <<USAGE
usage: $0 [-n] (-w WIDTH | -c COUNT) [--] string
	-n         Don't print the trailing newline
	-c COUNT   Print 'string' COUNT times
	-w WIDTH   Repeat 'string' until WIDTH chars are printed [default=-w80]

(There's a bug with a 'string' of just '-'; use -- before it to fix it, eg $0 -w8 -- -.)
USAGE

while getopts 'nhc:w:' option
do
	case $option in
	n) no_newline=1 ;;
	c) count=$OPTARG width= ;;
	w) width=$OPTARG count= ;;
	h) usage; exit ;;
	\?) return 2 ;;
	esac
done

shift `expr $OPTIND - 1`
string=$*

# Error out if no string to print was given
if test $# -eq 0
then
	usage >&2
	exit 1
fi

# If no width or count were given, default width
if test $width -o $count
then
	width=$COLUMNS
	test $width || width=`tput cols 2>&-`
	test $width || width=80
fi

if test X"$string" = X
then
	:
elif test ${#string} -eq 1
then
	test $width || width=$count
	printf "% ${width}s" '' | tr ' ' "$string"
elif test $width
then
	while test 0 \< $width; do
		printf %.${width}s "$string"
		width=`expr $width - ${#string}`
	done
else
	# Otherwise, we want a count iteration.
	while
		count=`expr $count - 1`
		test $count -ge 0
	do
		echo "$string\c"
	done
fi

# Print out a newline unless it is suppressed
test $no_newline && echo

# Always return successfully
exit 0
