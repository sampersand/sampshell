#!zsh

####################################################################################################
#                                       SampShell_{un,}debug                                       #
####################################################################################################
# I've had this around forever, and idk if I still need it?
if [[ -n ${Sampshell_EXPERIMENTAL-} ]]; then
## Re-define the `SampShell_debug` and `SampShell_undebug` functions that were previously declared
# in `posix/env.sh`. Because ZSH has more debugging options, we want to make sure we use the same
# name so that POSIX-compliant scripts run under ZSH will automatically use the enhanced debug fns.
#
# ZSH is annoying, however, as `setopt XTRACE` only lasts until the end of the function it's set in,
# and there's literally no way to change that. The best "solution" I have found is to set an EXIT
# trap, which are run within the calling function's context, and in the trap set the XTRACE option.
# Not great, especially since when the calling function returns `XTRACE` is unset :-/. Alas, ZSH.
# (We actually set all the options in the trap, as we `setopt LOCAL_OPTIONS` so we can have local
# traps.)
#
# Note that, just like the POSIX versions of these, these will not restore the options in their
# surrounding environment when `undebug` is called. While I could maybe do that one day (eg by using
# a stack for old options or something), I haven't used the `debug`/`undebug` functions enough to
# warrant delving into that. Possible future TODO?
	eval '
	function SampShell_debug {
		setopt LOCAL_OPTIONS LOCAL_TRAPS
		export SampShell_XTRACE=1
		trap "setopt XTRACE VERBOSE WARN_CREATE_GLOBAL WARN_NESTED_VAR" EXIT
	}

	function SampShell_undebug {
		setopt LOCAL_OPTIONS LOCAL_TRAPS
		unset SampShell_XTRACE
		trap "unsetopt XTRACE VERBOSE WARN_CREATE_GLOBAL WARN_NESTED_VAR" EXIT
	}'
fi
