#!/bin/sh

## Safety first
set -o nounset
set -o noglob
set -o errexit

## Script name, used in error messages and usage
readonly scriptname="${0##*/}"

## Print error message and exit
die () {
	fmt="%s: $1\\n"
	shift
	printf >&2 "$fmt" "$scriptname" "$@"
	exit 1
}

usage () { cat; } <<USAGE
usage: $scriptname [options] [--] message here
                   -m [options] [--] lines here
options:
	-wNUM         total width of the line
	-pNUM         Add N blank characters before the banner
	-sSTYLE       print out in STYLE style
	-m            interpret each argument as a separate line, instead of just one line.
	-b            Add a blank line before and after input
USAGE

expect_numeric () case $OPTARG in
	*[!0-9]*) die "-$opt expects a numeric argument, got: %s" "$OPTARG" ;;
	?*) ;;
	*) die "-$opt expects an argument"
esac

## Config options
width=80 style=\# pre=0 multiline= blank=

while getopts 'w:p:s:mbh' opt; do
	case $opt in
	h) usage; exit ;;
	m) multiline=1 ;;
	b) blank=1 ;;
	w) width=$OPTARG; expect_numeric ;;
	p) pre=$OPTARG; expect_numeric ;;
	s) style=$OPTARG ;;
	?) exit 1 ;;
	esac
done

shift $(( OPTIND - 1 ))

# for i in `seq -w 1 $((width + 1))`; do printf %d ${i#?}; done; echo

# Expect at least one banner argument
[ $# -eq 0 ] && { usage >&2; exit 1; }

# If multiline isn't set, all args are just separated by spaces
[ -n "$multiline" ] || set -- "$*"

# If blank is set, add in an extra line before and after
[ -n "$blank" ] && set -- '' "$@" ''

# Calculate the width
width=$((width - pre))

prpre () if [ "$pre" -ne 0 ]; then
	printf "${1-}%${pre}s"
fi

print_lines () {
	prefix=$1
	suffix=$2
	msg_width=$(($3 - ${#prefix} - ${#suffix}))
	shift 3

	for line
	do
		spacing=$(( (${#line} + msg_width) / 2  ))
		remainder=$(( msg_width - spacing ))

		prpre
		printf "${prefix}%${spacing}s%${remainder}s${suffix}\n" "$line"
	done
}

case $style in
	\#)
		prpre
		printf "%${width}s\n" | tr ' ' "$style"
		print_lines '#' '#' $width "$@"
		prpre
		printf "%${width}s\n" | tr ' ' "$style" ;;
	/)
		prpre
		printf "%${width}s\n" | tr ' ' "$style"
		print_lines '//' '//' $width "$@"
		prpre
		printf "%${width}s\n" | tr ' ' "$style" ;;
	\*)
		prpre
		printf "/%$((width-2))s\n" | tr ' ' "$style"
		print_lines ' *' '*' $((width - 1)) "$@"
		prpre ' '
		printf "%$((width-2))s/\n" | tr ' ' "$style" ;;
	*) die 'unknown style %s' "$style" ;;
esac
