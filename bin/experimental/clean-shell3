#!/bin/dash

set -euf

set -- -D "$@"
# set -- -sdash -vfoo=' bar baz' -D -- -l -f
unset dry

dry=
verbose=
shell=/bin/sh

preset=default
include_path=
sampshell_vars=
shell_vars=
shell_vars_index=0
env_vars=

prepend_vars=
prepend_variable () while [ $# -ne 0 ]; do
	if eval 'test -n ${'$1'}+1'; then
		prepend_vars="$prepend_vars \"$1=\$$1\""
	fi
	shift
done

while getopts 'DVs:anrpP:v:u:' opt; do
	case $opt in
	D) dry=1 verbose=1 ;;
	V) verbose=1 ;;
	s) shell=$OPTARG ;;

	a) preset=all     ;;
	n) preset=none    ;;
	r) preset=default ;;
	p) include_path=$PATH   ;;
	P) include_path=$OPTARG ;;
	S) sampshell_vars=1 ;;
	v)
		variable_name=${OPTARG%=*}
		variable_value=${OPTARG#"$variable_name"}

		if [ -n "$variable_value" ]; then
			variable_value=${variable_value#=}
		else
			case $variable_name in
				*[!a-zA-Z0-9_-]*)
					echo >&2 "cant get default name for env var with special chars"
					exit 1
			esac
			eval "variable_value=\$$variable_name"
		fi

		varname=SampShell_cleanshell_$((shell_vars_index += 1))
		eval "$varname=\$variable_value"
		shell_vars="$shell_vars $variable_name=\"\$$varname\""
		;;
	u) echo 'todo' ;;
	?) exit 2 ;;
	esac
done

shift $(( OPTIND - 1 ))

if ! shell=$(command -pv "$shell"); then
	echo >&2 "unable to locate the shell '$shell'; exiting"
	exit 1
fi

if ! cmd=$(command -pv env); then
	echo >&2 "unable to locate the 'env' command"
fi

if [ "$dry" = 1 ]; then
	cmd="echo $cmd"
fi

if [ -n "$include_path" ]; then
	cmd="$cmd \"PATH=\$PATH\""
fi


if [ "$preset" != all ]; then
	cmd="$cmd -i"

	if [ "$preset" = default ]; then
		prepend_variable TERM HOME SHLVL LANG
		# [ -n "${TERM+1}"  ] && cmd="$cmd \"TERM=\$TERM\""
		# [ -n "${HOME+1}"  ] && cmd="$cmd \"HOME=\$HOME\""
		# [ -n "${SHLVL+1}" ] && cmd="$cmd \"SHLVL=\$SHLVL\""
		# [ -n "${LANG+1}"  ] && cmd="$cmd \"LANG=\$LANG\""
	fi
fi


cmd="$cmd $prepend_vars $shell_vars -- $shell $@"
# IFS=$nul
# echo env $env_opt $env_vars -- "$shell" "$@"
echo $cmd
eval "exec $cmd"
echo yes

exit

	op.on

	op.on '-v', '--var=KEY[=VAL]', 'sets VAR=VAL in the shell to execute; Without VAL defaults to the value in ENV' do |key|
		$vars.add(*key,split('=', 2), option: '--var')
	end

	op.on '--unset-var KEY', 'Unsets KEY from the env' do |key|
		$vars.delete key
	end

  op.on '-A', '--arg=VALUE', 'Give an argument to the CMD without stopping parsing' do |value|
    $arguments.append value
  end

  op.on_tail 'The -r and -p flags are set by default, but can be unset with -n'

  # op.require_exact = true
	op.permute! rescue op.abort
end
exit
