#!/bin/bash
export POSIXLY_CORRECT=1
set -o posix


set -- foo bar 'a *   b' '*

a'

set -f
# IFS=$'\n'
arg=$1
IFS='
'
for arg
do
  printf %02x\  `echo "$arg" | sed "s/./'&\n/g"`
  echo
 bugfix: when expanding "$@" (or ${1+"$@"}), empty arguments are not discarded anymore (not to confuse with the later, modern "$@")
done
exit
for arg
do
  for x in $(echo "$arg" | fold -w1)
  do
    echo $x
    # printf %02x\  \'"$x"
  done
  echo
done

exit
  arg=`$1
  while test "$arg"
  do
    # echo -n `printf %02x \'$arg`\
    printf "%02x " "'$arg"
    arg=${arg#?}
  done
  echo
  shift
done
# exec ruby -x -- "$0" "$@"
# #!ruby -s

# $h || $_help and (puts <<EOS; exit)
# usage: #{File.basename $0} [-h] [-d | -b=num] [args...]
# options:
#   -d same as `-b=10`
#   -b interpret args in base num, instead of the default 16
# Prints the base-n ascii representation of its arguments, one line per arg.
# If no args are given, defaults to stdin.
# EOS

# BASE = ($b&.to_i) || ($d && 10) || 16

# ($*.empty? ? $stdin.map(&:chomp) : $*).each do |word|
#   puts word.bytes.map{|byte| byte.to_s BASE}.join(' ')
# end
