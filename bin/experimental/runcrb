#!/usr/bin/env ruby

# This file is incredibly overengineered haha.

def usage(success = false)
  $stdout = $stderr unless success
  puts <<~USAGE; exit(success)
    usage: #$0 [-c compiler] [compiler opts ...] [prelude ...] main [-- main-arguments]
    compiles C code using 'compiler', which defaults to 'cc'. 'opts' can be
    interspersed within arguments.
    - prelude is done before 'main'
    - stdio, stdlib, ctype, string, and limits all imported by default
    - P is a macro shorthand for printf(...), putchar('\\n')
  USAGE
end

class Program
  def Program::MakeOutputFile()
    $EXECUTABLE_FILE = %x<mktemp>.chop
    $?.success? or fail('cannot make temp file')
    trap 'EXIT', 'File.delete $EXECUTABLE_FILE' and fail('made two temp files')
    $EXECUTABLE_FILE
  end

  attr('compiler', 'compilerOpts')

  def initialize argv=ARGV
    @compiler = 'cc'
    @compilerOpts = []
    @prelude = []

    self.parseOptions(argv)
  end

  private def parseOptions argv
    while (arg = argv.shift()) do
      case arg
      when '-h'   then usage true
      when /^-c/  then @compiler = ($' || argv.shift) or usage
      when '--'   then break()
      when /^-.*/ then @compilerOpts << arg
      else @prelude << arg
      end
    end

    usage unless (@main = @prelude.pop())
  end

  public def writeProgram()
    read, write = IO.pipe()

    write << <<~'C'
      #include <stdio.h>
      #include <stdlib.h>
      #include <ctype.h>
      #include <string.h>
      #include <limits.h>
      #include <unistd.h>
      #define P(...) (printf(__VA_ARGS__),putchar('\n'))
    C

    for line in @prelude do
      write.puts(line)
    end

    printf write, <<~C, @main
      int main(int argc, const char **argv) {
        %s;
      }
    C

    write.close()
    return( read )
  end
end

def executeProgram program, outputFile = Program::MakeOutputFile()
  read = program.writeProgram()

  system(
    { 'RUNC_ARGV0' => outputFile },
    program.compiler,
    '-xc',
    '-o',
    outputFile,
    '/dev/fd/10',
    *program.compilerOpts,
    10 => read,
    exception: true
  )
rescue Errno::ENOENT
  abort "cannot find compiler: #{compiler}"
rescue RuntimeError
  exit false
else
  # Don't use `exec` so we can run our `trap` to remove it
  system [$EXECUTABLE_FILE] * 2, *$*
  $?
end

exit executeProgram(Program.new).exitstatus
