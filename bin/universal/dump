#!/usr/bin/env ruby
require 'optparse'

OptParse.accept Encoding do |encoding|
  if encoding == '?'
    puts "Valid encodings: #{Encoding.name_list.join(', ')}"
    exit
  end

  begin
    Encoding.find encoding
  rescue ArgumentError
    raise "invalid encoding '#{encoding}'. (Use '?' to list all encodings)"
  end
end

$standout = true
$escape_whitespace = true
$suppress_trailing_newline = false

OptParse.new do |op|
  op.on '-w', '--[no-]dont-escape-whitespace', "Don't escape non-space whitespace." do |ews|
    $escape_whitespace = !ews
  end

  op.on '-i', '--input-encoding=ENCODING', Encoding, 'Set input encoding (default: UTF-8)' do |enc|
    $input_encoding = enc
  end

  op.on '-o', '--output-encoding=ENCODING', Encoding, 'Set output encoding (default: the input encoding)' do |enc|
    $output_encoding = enc
  end

  op.on '-\\', '--[no-]escape-backslash', 'Also escape backslashes. Defaults to on when standout is enabled' do |bs|
    $escape_backslash = bs
  end

  op.on '-n', '--suppress-trailing-newline', 'Do not print out a trailing newline' do
    $suppress_trailing_newline = true
  end

  op.on '-x', '--always-hex', 'Do not display C-style `\r`' do
    $cstyle = false
  end

  op.on '-c', '--cstyle', 'Display escpaes with C-style `\r` etc' do
    $cstyle = true
  end

  op.on '-s', '--[no-]standout', 'Disables standout mode' do |s|
    $standout = s
  end

  op.on '-U', '--escape-larger', 'Escape things larger than 0xff' do
    $escape_larger = true
  end

  op.on '-a', '--ascii-only', 'Escape upper bits too' do
    $input_encoding = $output_encoding = 'ASCII'
  end

  op.on '-u', '--utf-8', 'Assume input is in UTF-8 format' do
    $input_encoding = $output_encoding = 'UTF-8'
    $escape_larger = false
  end

  op.on '-b', '--binary' do
    $input_encoding = $output_encoding = 'binary'
    $escape_whitespace = true
  end

  op.parse! rescue abort "#{op.program_name}: #$!"
end

$input_encoding ||= Encoding::UTF_8
$output_encoding ||= $input_encoding

$cstyle = true unless defined? $cstyle
$escape_backslash = !$standout if $escape_backslash.nil?

BEGIN_STANDOUT = "\e[7m"
END_STANDOUT = "\e[27m"

C_CODEPOINTS = {
  0=>'\x00', 7=>'\a', 8=>'\b', 9=>'\t', 10=>'\n', 11=>'\v',
  12=>'\f', 13=>'\r', 27=>'\e'
}.freeze

WHITESPACE = [9, 10]

ARGF.set_encoding $input_encoding

OUTPUT = String.new(capacity: 4096 * 8, encoding: $output_encoding)
INPUT_LINE = String.new(capacity: 4096, encoding: $input_encoding)

def escape(...)
  $standout and OUTPUT.concat BEGIN_STANDOUT
  OUTPUT.concat(...)
  $standout and OUTPUT.concat END_STANDOUT
end

while (ARGF.readpartial(4096, INPUT_LINE) rescue nil)
  INPUT_LINE.each_codepoint do |char|
    if (WHITESPACE.include?(char) ? $escape_whitespace : char < 0x20)
      escape ($cstyle && C_CODEPOINTS[char]) || ('\x%02X' % char)
    elsif char == '\\'.ord and $escape_backslash
      escape '\\\\'
    elsif (0x7F..0xFF).include? char
      escape '\x%02X' % char
    elsif 0xff < char && $escape_larger
      escape '\u{%X}' % char
    else
      OUTPUT.concat char
    end
  end

  print OUTPUT
  ended_with_newline = OUTPUT.end_with? "\n"
  OUTPUT.clear
end

puts unless $suppress_trailing_newline || ended_with_newline

