#!/usr/bin/env ruby

require 'optparse'

OPTIONS = {
  width: 80,
  pre: 0,
  style: '#',
  justify: :center,
}

OptParse.new nil, 20 do |op|
  op.banner.concat ' message [...]'

  op.on '-w', '--width=N', Integer, 'Total line width; Width of 0 is "auto"'
  op.on '-p', '--pre=N', Integer, 'Length to add before the line'
  op.on '-s', '--style=STYLE', 'Use STYLE instead of default `#`'

  op.on '-m', '--multiline', 'Interpret each arg as a separate line'
  op.on '-b', '--blank', 'Add a blank line before and after input'
  op.on '-c', '--copy', 'Pipe output to pbcopy command'
  op.on '-S', '--squash', 'When enabled, extra padding isnt added to lines'

  op.on '-j', '--justify=HOW', %i[left center right l c r], 'left, center, or right justify'

  op.parse! into: OPTIONS rescue op.abort $!
  ARGV.empty? and abort op.help
end

OPTIONS[:multiline] or  ARGV.replace [ARGV.join(' ')]
OPTIONS[:blank]     and (ARGV.unshift ''; ARGV.push '')
OPTIONS[:copy]      and $stdout = IO.popen('pbcopy', 'w')

OPTIONS[:width] == 0 and OPTIONS[:width] = $*.map(&:length).max + 4 # TODO: use other pres

if (OPTIONS[:width] - OPTIONS[:pre]).negative?
  abort "#{File.basename($0)}: -p > -w; no space remaining for text"
end

$width = OPTIONS.fetch(:width, 80)
$pre   = OPTIONS.fetch(:pre, 0)

$width -= $pre

def ppre(*a)
  print(' ' * $pre, *a, "\n")
end

def print_lines(prefix, suffix=prefix, lines: ARGV)
  unless OPTIONS[:squash]
    (suffix = +suffix).prepend ' ' # `+suffix` in case it's the default
    prefix.concat ' '
  end

  msg_width = $width - prefix.length - suffix.length
  method = case OPTIONS[:justify]
           when :l, :left   then :ljust
           when :r, :right  then :rjust
           when :c, :center then :center
           else fail "<bug: bad justify given: #$justify>"
           end

  lines.each do |line|
    ppre prefix, line.public_send(method, msg_width), suffix
  end
end

print (1..$width+$pre).map { _1.to_s[-1] }.join, "\n" if $-d

case OPTIONS[:style]
when '#'
  ppre '#' * $width
  print_lines('#')
  ppre '#' * $width
when '/'
  ppre '/' * $width
  print_lines('//')
  ppre '/' * $width
when '*'
  ppre '/', '*' * ($width - 2), ' '
  print_lines(' *', '* ')
  ppre ' ', '*' * ($width - 2), '/'
else
  abort 'unknown style %s' % OPTIONS[:style]
end
