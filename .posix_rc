#!/bin/sh

#### Interactive config for all POSIX-compliant shells.
# This file sets up the minimum interactive environment I want on all shells (a
# couple of essential functions, some aliases, and a few macOS-specific things),
# then loads shell-specific config.
#
# (As this file is loaded by all shells, it's entirely POSIX-compliant.)
#
# This file's intended to be loaded after `env.sh`, as it also does some setup,
# namely setting `$SampShell_ROOTDIR`. This file expects that to be set, as it
# uses that to determine where the shell-specific config is located; If it's not
# set, the "universal config" in this file will still be run, but shell-specific
# configs won't be (as they can't be located).
####

################################################################################
#                                                                              #
#                          Ensure We Want to Startup                           #
#                                                                              #
################################################################################

## If SampShell_DISABLED is set to a non-empty value, then don't do any setup.
[ -n "${SampShell_DISABLED-}" ] && return

## Ensure we only load this file once.
[ -n "${SampShell_interactive_loaded+1}" ] && return 0
SampShell_interactive_loaded=1

################################################################################
#                                                                              #
#                          Common Functions & Aliases                          #
#                                                                              #
################################################################################

## Short helper for looking at history.
# If any arguments are given, they're forwarded to `fc -l` (ie list that many
# arguments). Without arguments, if not connected to a tty, all commands are
# printed out (for usage with `grep`).
h () {
	if [ "$#" -eq 0 ] && [ ! -t 1 ]
	then set -- -n 0
	fi

	fc -l "$@"
}

## Changes to the directory containing its argument.
# (Useful for dragging files in from Finder to Terminal on MacOS.)
cdd () {
	if [ "$#" -ne 1 ]; then
		echo >&2 'usage: cdd path'
		echo >&2
		echo >&2 "cd's to the directory containing 'path'"
		return 2
	fi

	# We have to do this whole rigmarole in case the directory ends in a
	# newline. (Odd, but a possibility, and I don't want to be blindsided by
	# it later.)
	if ! SampShell_scratch=$(dirname -- "$1" && printf x); then
		unset -v SampShell_scratch
		return 1
	else
		set -- "${SampShell_scratch%?x}"
		unset -v SampShell_scratch # Unset the variable so it won't leak
	fi

	# In case the directory's name is `-`, we don't want to `cd -` (which
	# would be the previous directory.)
	[ "$1" = - ] && set ./-

	# Don't respect `CDPATH` here, as we know the directory to go to. Also,
	# don't use any aliases for `cd` in case they were defined.
	CDPATH= \cd -- "$1"
}

## Add in a `p_sh` program which prints out a debugging form of its arguments.
# This program `.`s the `p_sh` program, instead of executing it, as that way
# `NUL` can be passed by shells which support it.
p_sh () ( . p _sh)

## Creates a directory, and then changes to it. (`rd` is a `bin-macOS` command.)
md () {
	# (use `\cd` so that we don't get alias expansion that might exist)
	mkdir -p -- "${1:?missing dir}" && CDPATH= \cd -- "$1"
}

## Common aliases
alias ls='ls -AFq'
alias l=ls
alias ll='l -l'
alias lt='l -tl'
alias j=jobs

## Sublime Text editor shorthand aliases
alias s=subl
alias ss=ssubl
alias ssubl='subl --create'

################################################################################
#                                                                              #
#                                 STTY Setup                                   #
#                                                                              #
################################################################################

## TODO: IDK IF I WANT THIS
if [ -n "${SampShell_EXPERIMENTAL-}" ]; then
	[ -t 0 ] && stty noflsh
fi

################################################################################
#                                                                              #
#                                    Safety                                    #
#                                                                              #
################################################################################

## Don't clobber files on output
set -o noclobber

## Make `rm`, `mv`, and `cp` safe by default; repeat the second arg for unsafe
alias rm='rm -i' rmm='command rm'
alias mv='mv -i' mvv='command mv'
alias cp='cp -i' cpp='command cp'

## Shorthand aliases for "safe alternatives" found in `bin`
alias m=mv-safe
alias r=trash

################################################################################
#                                                                              #
#                                 MacOS Config                                 #
#                                                                              #
################################################################################

if [ "$(uname)" = Darwin ]; then
	## Add options to `ls` which macOS supports. (We only add the alias if
	# `ls` was already an alias, otherwise the `eval` doesn't work.)
	alias ls='ls -AFqhGb'
fi

################################################################################
#                                                                              #
#                                    Prompt                                    #
#                                                                              #
################################################################################

# If the prompt is a blank prompt, then set it to something slightly better
if [ -z "${PS1:+x}" ] || [ "$PS1" = '$ ' ]; then
	PS1='[?$? !!! L$SHLVL] ${PWD#"${HOME%/}"/} ${0##*/}$ '
fi


# Set the editor to use `emacs` keybinds; Sadly, zsh doesn't like it when we use
# `emulate sh -c '...'` (which we do in `.zshrc`) and then set emacs...
[ -z "${ZSH_VERSION-}" ] && set -o emacs

################################################################################
#                                                                              #
#                             Shell-Specific Setup                             #
#                                                                              #
################################################################################

case $0 in
dash|-dash|*/dash)
	# Dash doesn't do shlvl on its own
	export SHLVL="$(( SHLVL + 1 ))"

	# Dash doesn't support `!` expansions sadly
	PS1=$(printf %s "$PS1" | sed 's/!!! //')
esac
