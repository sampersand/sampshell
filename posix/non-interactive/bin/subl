#!/bin/sh

# Safety first
set -o nounset

scriptname=${0##*/} # Scriptname is used for usage
editor=${SampShell_EDITOR:-TextEdit} # What program to open
create= # Whether or not to create missing files/folders

warn () { fmt="$1"; shift; printf "%s: $fmt\\n" "$scriptname" "$@" >&2; }
die () { warn "$@"; exit 1; }

usage () { cat; } <<USAGE
usage: $scriptname [options] [--] [file ...]"
options:
	-h, --help            print help, and then exit
	-c, --create          creates non-existing files/dirs
	-C, --no-create       disables creation
	-eNAME, --editor=NAME sets the editor; overrides \$SampShell_EDITOR.
USAGE

while [ "$#" -ne 0 ]; do
	case "$1" in 
		--) shift; break ;;
		-h | --help) usage; exit 0 ;;
		-c | --create) create=1 ;;
		-C | --no-create) create= ;;
		-e* | --editor*)
			editor=${1#-e}
			[ "$editor" = "$1" ] && editor=${1#--editor}

			if [ -z "$editor" ]; then
				editor=${2-}
				[ -z "$editor" ] && die 'missing required argument for %s' "$1"
				shift
			fi
			;;

      -[^-]?*) # Support `-abc` options
         rest2="${1#-?}"
         rest1="${1%"$rest2"}"
         shift
         set -- "$rest1" "-$rest2" "$@"
         continue ;;
      -?*) die 'unknown option: %s' "$1" ;;
		*) break ;;
	esac

	shift
done

# If no arguments are given, use the pwd.
[ "$#" = 0 ] && set -- "$PWD"

# Create files
if [ -n "$create" ]; then
	for file; do
		[ -z "$file" ] && continue # Don't create empty files
		[ -e "$file" ] && continue # File exists, no need to make it.

		# If the file ends with `/`, then it's a directory and we create it.
		if [ "${file%/}" != "$file" ]; then
			mkdir -p -- "$fil}" || exit
		else
			{ dir="$(dirname -- "$file" && echo x)" && \
				mkdir -p -- "${dir%?x}" && \
				touch -- "$file"; } || exit
		fi
	done
fi

exec open -a "$editor" -- "$@"
